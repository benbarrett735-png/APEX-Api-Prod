-- Files Integration for Research Reports
-- Extends the existing files system to support research reports

-- Add research report type to files table
ALTER TABLE files ADD COLUMN IF NOT EXISTS report_type text;
ALTER TABLE files ADD COLUMN IF NOT EXISTS report_metadata jsonb DEFAULT '{}'::jsonb;

-- Create index for research reports in files
CREATE INDEX IF NOT EXISTS idx_files_report_type ON files(report_type) WHERE report_type IS NOT NULL;

-- Function to save research report to files
CREATE OR REPLACE FUNCTION save_research_report_to_files(
  p_report_id uuid,
  p_user_id uuid,
  p_org_id uuid
) RETURNS jsonb AS $$
DECLARE
  v_report record;
  v_file_id uuid;
  v_file_name text;
  v_file_size int;
  v_metadata jsonb;
BEGIN
  -- Get report data
  SELECT rr.*, r.title, r.mode, r.queries
  INTO v_report
  FROM research_reports rr
  JOIN research_runs r ON rr.run_id = r.id
  WHERE rr.id = p_report_id 
    AND r.org_id = p_org_id;
  
  IF NOT FOUND THEN
    RETURN jsonb_build_object('success', false, 'error', 'Report not found');
  END IF;
  
  -- Generate file name
  v_file_name := COALESCE(v_report.title, 'Research Report') || '_' || to_char(now(), 'YYYY-MM-DD') || '.pdf';
  
  -- Calculate file size (rough estimate)
  v_file_size := length(v_report.summary || v_report.narrative || v_report.evidence::text);
  
  -- Build metadata
  v_metadata := jsonb_build_object(
    'reportId', p_report_id,
    'reportType', v_report.mode,
    'generatedAt', now(),
    'source', 'research',
    'queries', v_report.queries,
    'evidenceCount', jsonb_array_length(v_report.evidence),
    'hasMatrices', jsonb_array_length(v_report.matrices) > 0,
    'hasContradictions', jsonb_array_length(v_report.contradictions) > 0
  );
  
  -- Create file record
  INSERT INTO files (
    id, org_id, user_id, name, type, size, status,
    metadata, report_type, report_metadata, created_at, updated_at
  ) VALUES (
    uuid_generate_v4(),
    p_org_id,
    p_user_id,
    v_file_name,
    'research_report',
    v_file_size,
    'completed',
    v_metadata,
    v_report.mode,
    v_metadata,
    now(),
    now()
  ) RETURNING id INTO v_file_id;
  
  RETURN jsonb_build_object(
    'success', true,
    'fileId', v_file_id,
    'fileName', v_file_name
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get research reports from files
CREATE OR REPLACE FUNCTION get_research_reports_from_files(
  p_org_id uuid,
  p_limit int DEFAULT 50,
  p_offset int DEFAULT 0
) RETURNS TABLE (
  file_id uuid,
  file_name text,
  report_type text,
  created_at timestamptz,
  size int,
  metadata jsonb
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    f.id,
    f.name,
    f.report_type,
    f.created_at,
    f.size,
    f.report_metadata
  FROM files f
  WHERE f.org_id = p_org_id
    AND f.report_type IS NOT NULL
    AND f.status = 'completed'
  ORDER BY f.created_at DESC
  LIMIT p_limit
  OFFSET p_offset;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get research report details
CREATE OR REPLACE FUNCTION get_research_report_details(
  p_file_id uuid,
  p_org_id uuid
) RETURNS jsonb AS $$
DECLARE
  v_file record;
  v_report record;
  v_result jsonb;
BEGIN
  -- Get file record
  SELECT * INTO v_file
  FROM files
  WHERE id = p_file_id 
    AND org_id = p_org_id
    AND report_type IS NOT NULL;
  
  IF NOT FOUND THEN
    RETURN jsonb_build_object('success', false, 'error', 'File not found');
  END IF;
  
  -- Get report data
  SELECT rr.*, r.title, r.mode, r.queries, r.status as run_status
  INTO v_report
  FROM research_reports rr
  JOIN research_runs r ON rr.run_id = r.id
  WHERE rr.id = (v_file.report_metadata->>'reportId')::uuid
    AND r.org_id = p_org_id;
  
  IF NOT FOUND THEN
    RETURN jsonb_build_object('success', false, 'error', 'Report data not found');
  END IF;
  
  -- Build result
  v_result := jsonb_build_object(
    'success', true,
    'file', jsonb_build_object(
      'id', v_file.id,
      'name', v_file.name,
      'type', v_file.type,
      'size', v_file.size,
      'createdAt', v_file.created_at,
      'metadata', v_file.metadata
    ),
    'report', jsonb_build_object(
      'id', v_report.id,
      'title', v_report.title,
      'type', v_report.mode,
      'status', v_report.run_status,
      'summary', v_report.summary,
      'narrative', v_report.narrative,
      'evidence', v_report.evidence,
      'matrices', v_report.matrices,
      'contradictions', v_report.contradictions,
      'followups', v_report.followups,
      'queries', v_report.queries,
      'createdAt', v_report.created_at
    )
  );
  
  RETURN v_result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Update files page to show research reports
CREATE OR REPLACE VIEW files_with_research AS
SELECT 
  f.*,
  CASE 
    WHEN f.report_type IS NOT NULL THEN 'Research Report'
    ELSE 'Document'
  END as display_type,
  CASE 
    WHEN f.report_type IS NOT NULL THEN f.report_metadata->>'reportType'
    ELSE f.type
  END as category
FROM files f
WHERE f.status = 'completed';

-- Grant permissions
GRANT EXECUTE ON FUNCTION save_research_report_to_files(uuid, uuid, uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION get_research_reports_from_files(uuid, int, int) TO authenticated;
GRANT EXECUTE ON FUNCTION get_research_report_details(uuid, uuid) TO authenticated;
GRANT SELECT ON files_with_research TO authenticated;
